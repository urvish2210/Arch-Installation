## Install Arch Linux with disk encryption and UEFI.

## Download the archiso image from https://www.archlinux.org/
## Check sha1 sums
# $ sha1sum archlinux.iso

## Copy to a usb-drive
# $ dd if=archlinux.iso of=/dev/sdX bs=16M && sync

## Insert this flash-drive into PC and boot this image

## Connect to Wi-Fi, skip this if you have wired connection
# $ wifi-menu

## Test Internet connection
# $ ping google.com

## Write or fetch faster mirrorlist for your country (These mirrors are for Australia)
rm -f /etc/pacman.d/mirrorlist
echo "## Australia" > /etc/pacman.d/mirrorlist
echo "Server = https://mirror.aarnet.edu.au/pub/archlinux/$repo/os/$arch" >> /etc/pacman.d/mirrorlist
echo "Server = http://archlinux.mirror.digitalpacific.com.au/$repo/os/$arch" >> /etc/pacman.d/mirrorlist
echo "Server = http://ftp.iinet.net.au/pub/archlinux/$repo/os/$arch" >> /etc/pacman.d/mirrorlist
echo "Server = http://mirror.internode.on.net/pub/archlinux/$repo/os/$arch" >> /etc/pacman.d/mirrorlist
echo "Server = http://archlinux.melbourneitmirror.net/$repo/os/$arch" >> /etc/pacman.d/mirrorlist
echo "Server = http://ftp.swin.edu.au/archlinux/$repo/os/$arch" >> /etc/pacman.d/mirrorlist

# $ curl -o /etc/pacman.d/mirrorlist https://www.archlinux.org/mirrorlist/all/                                                                                                                                                                                          

## Uncomment lines for your specific country to get good download speed
# $ vim /etc/pacman.d/mirrorlist

## Create partitions                                                                                                                                                                          
cfdisk /dev/sda                                                                                                                                                                               
                                                                                                                                                                                             
## Number    Size            Type
##    1    512.0 MiB     EFI System
##    2    200.0 MiB     Linux filesystem
##    3    800.0 GiB     Linux LVM

## Make filesystem for EFI
mkfs.fat -F32 /dev/sda1

## Create /boot container
mkfs.ext2 /dev/sda2

## Create crypted LVM with /root and swap
cryptsetup luksFormat /dev/sda3
cryptsetup open /dev/sda3 cryptlvm
pvcreate /dev/mapper/cryptlvm
vgcreate vg0 /dev/mapper/cryptlvm
lvcreate -L 16G vg0 -n swap
lvcreate -l 100%FREE vg0 -n root
mkfs.ext4 /dev/mapper/vg0-root
mkswap /dev/mapper/vg0-swap

## Mount
swapon /dev/mapper/vg0-swap
mount /dev/mapper/vg0-root /mnt
mkdir /mnt/boot
mount /dev/sda2 /mnt/boot
mkdir /mnt/boot/efi
mount /dev/sda1 /mnt/boot/efi

## Check
lsblk

## You will have something like this:

## NAME           MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
## loop0            7:0    0 347.9M  1 loop  /run/archiso/sfs/airootfs
## sdb              8:32   1   3.8G  0 disk  
## ├─sdb2           8:34   1    40M  0 part  
## └─sdb1           8:33   1   797M  0 part  /run/archiso/bootmnt
## sda              8:0    0 931.5G  0 disk  
## ├─sda1           8:1    0   512M  0 part  /mnt/boot/efi
## ├─sda2           8:2    0   200M  0 part  /mnt/boot
## ├─sda3           8:3    0   800G  0 part  
## │ └─cryptlvm   254:1    0   800G  0 crypt 
## │   ├─vg0-swap 254:2    0    16G  0 lvm   [SWAP]
## │   └─vg0-root 254:3    0   784G  0 lvm   /mnt

## Install system
pacstrap /mnt base base-devel grub-efi-x86_64 vim git efibootmgr dialog wpa_supplicant

## Generate fstab
genfstab -pU /mnt >> /mnt/etc/fstab

## This is fix for error : /run/lvm/lvmetad.socket: connect failed: No such file or directory

mkdir /mnt/hostrun/
mount --bind /run /mnt/hostrun

## Chroot into our newly installed system 
arch-chroot /mnt /bin/bash
mkdir /run/lvm
mount --bind /hostrun/lvm /run/lvm

## Set timezone, hostname...
ln -sf /usr/share/zoneinfo/Europe/Minsk /etc/localtime
hwclock --systohc --utc
echo Archlinux > /etc/hostname
echo "127.0.0.1    Archlinux.localdomain     Archlinux" >> /etc/hosts

## Configure locales
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
echo LANG=en_US.UTF-8 >> /etc/locale.conf

## Set root password
passwd

## Open this file
# $ vim /etc/mkinitcpio.conf
## Edit HOOKS="base ... fsck" with HOOKS="base udev autodetect modconf block keymap encrypt lvm2 resume filesystems keyboard fsck"
## Use "i" key to edit (insert something), ESC and ":wq" to write changes and quit

# Regenerate initrd image
mkinitcpio -p linux

# If you got warnings about missing firmware for wd719x and aic94xx, you can ignore it, with high probability you don't even have this hardware

# Change grub config
echo "GRUB_ENABLE_CRYPTODISK=y" >> /etc/default/grub
sed -i "s#^GRUB_CMDLINE_LINUX=.*#GRUB_CMDLINE_LINUX=\"cryptdevice=UUID=$(blkid /dev/sda3 -s UUID -o value):lvm resume=/dev/mapper/vg0-swap\"#g" /etc/default/grub
grub-mkconfig -o /boot/grub/grub.cfg

# Install grub
grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ArchLinux

# Mount root without any issue
#dd bs=512 count=8 if=/dev/urandom of=/crypto_keyfile.bin
#chmod 000 /crypto_keyfile.bin
#cryptsetup luksAddKey /dev/sda3 /crypto_keyfile.bin
#mkinitcpio -p linux
#chmod 600 /boot/initramfs-linux*

# If you want to start without password prompt use following line
#sed -i 's\^FILES=.*\FILES="/crypto_keyfile.bin"\g' /etc/mkinitcpio.conf

# Enable Intel microcode CPU updates (if you use Intel processor, of course)
pacman -S intel-ucode
grub-mkconfig -o /boot/grub/grub.cfg

# Some additional security
chmod 700 /boot
chmod 700 /etc/iptables

# Create non-root user, set password
useradd -m -g users -G wheel YOUR_USER_NAME
passwd YOUR_USER_NAME

# Open file
vim /etc/sudoers
# and uncomment string %wheel ALL=(ALL) ALL

# Exit from chroot, unmount system, shutdown, extract flash stick. You made it! Now you have fully encrypted system.
exit
umount -R /mnt
swapoff -a
shutdown now


# Post-installation

# Install oh-my-zsh
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

##  DO FOLLOWING CHANGES ACCORDING TO YOUR TASTE
# Change export ZSH=../.oh-my-zsh with export ZSH=$HOME/.oh-my-zsh
# Change ZSH_THEME=".." to ZSH_THEME="maran"
# Change plugins=(...) to plugins=(git profiles adb archlinux common-aliases extract golang sudo systemd colorize pip python dircycle history terminitor)

# For dual boot
pacman -S os-prober 
os-prober
grub-mkconfig -o /boot/grub/grub.cfg

# Other necessary packages
pacman -S opera libreoffice networkmanager network-manager-applet xfce4 xfce4-goodies xf86-video-intel mesa xorg xorg-xinit lightdm lightdm-gtk-greeter
systemctl enable NetworkManager.service
systemctl start NetworkManager.service
systemctl enable lightdm.service
systemctl start lightdm.service
# Change as follow in /etc/lightdm/lightdm.conf
[Seat:*]
...
greeter-session=lightdm-yourgreeter-greeter

# Install pacaur
# Add following in /etc/pacman.conf
[archlinuxfr]
SigLevel = Never
Server = http://repo.archlinux.fr/$arch

pacman -Sy yaourt
yaourt -S pacaur
pacman -Rus yaourt
# Remove archlinuxfr from /etc/pacman.conf
